<?php

namespace App\Services\PaymentGateways;

use Illuminate\Http\Request;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Checkout\CheckoutSdk;
use Checkout\Environment;
use Checkout\CheckoutException;
use Checkout\Payments\Request\Source\RequestTokenSource;
use Checkout\Payments\Request\PaymentRequest;
use Checkout\Common\Currency;
use Checkout\CheckoutApiException;

class CheckoutService
{
    public function pay(Request $request)
    {
        $log = new Logger("checkout-sdk-php-sample");
        $log->pushHandler(new StreamHandler("php://stdout"));

        // Initialize Checkout API
        try {
            $api = CheckoutSdk::builder()->staticKeys()
                ->environment(Environment::sandbox())
                ->secretKey(config('payment.CHECKOUT_SECRET_KEY'))
                ->build();
        } catch (CheckoutException $e) {
            $log->error("An exception occurred while initializing Checkout SDK : {$e->getMessage()}");
            http_response_code(400);
        }

        // The token generated by Frames on the client side
        $requestTokenSource = new RequestTokenSource();
        $requestTokenSource->token = $request->token;

        $data = new PaymentRequest();
        $data->source = $requestTokenSource;
        $data->currency = Currency::$USD;
        $data->amount = $request->amount * 100;
        $data->processing_channel_id = config('payment.CHECKOUT_CHANNEL_ID');

        try {
            json_encode($api->getPaymentsClient()->requestPayment($data));
        } catch (CheckoutApiException $e) {
            $log->error("An exception occurred while processing payment request");
            http_response_code(400);
        }
    }
}
